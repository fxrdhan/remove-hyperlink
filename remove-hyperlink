#!/bin/bash

# Global variables
SCRIPT_NAME=$(basename "$0")
EXIT_SUCCESS=0
EXIT_INVALID_ARGS=1
EXIT_FILE_NOT_FOUND=2
EXIT_PERMISSION_ERROR=3

# Function to display script usage
display_usage() {
    cat << EOF
Usage: $SCRIPT_NAME input.md [output.md]

Remove hyperlinks from Markdown files.

Arguments:
    input.md    Input markdown file
    output.md   Optional output file. If not specified, result will be displayed in terminal.

Examples:
    $SCRIPT_NAME input.md
    $SCRIPT_NAME input.md output.md
EOF
}

# Function to validate input file
validate_input_file() {
    local input_file="$1"
    
    # Check if file exists
    if [ ! -f "$input_file" ]; then
        echo "Error: File '$input_file' not found." >&2
        exit $EXIT_FILE_NOT_FOUND
    fi
    
    # Check if file is readable
    if [ ! -r "$input_file" ]; then
        echo "Error: Cannot read file '$input_file'. Check permissions." >&2
        exit $EXIT_PERMISSION_ERROR
    fi
}

# Function to validate output location
validate_output_location() {
    local output_file="$1"
    local output_dir=$(dirname "$output_file")
    
    # Check if output directory exists and is writable
    if [ ! -d "$output_dir" ]; then
        echo "Error: Directory '$output_dir' does not exist." >&2
        exit $EXIT_PERMISSION_ERROR
    fi
    
    if [ ! -w "$output_dir" ]; then
        echo "Error: Cannot write to directory '$output_dir'. Check permissions." >&2
        exit $EXIT_PERMISSION_ERROR
    fi
    
    # If file exists, check if it's writable
    if [ -f "$output_file" ] && [ ! -w "$output_file" ]; then
        echo "Error: Cannot write to file '$output_file'. Check permissions." >&2
        exit $EXIT_PERMISSION_ERROR
    fi
}

# Function to remove hyperlinks from markdown
remove_hyperlinks() {
    local input_file="$1"
    sed -E '
        # Remove standard markdown links [text](url)
        s/\[([^]]+)\]\(([^)]+)\)/\1/g;

        # Remove wiki-style links [[text]](url)
        s/\[\[([^]]+)\]\]\(([^)]+)\)/\1/g;

        # Remove reference-style links [text][ref]
        s/\[([^]]+)\]\[[^]]+\]/\1/g;

        # Remove bare URLs (http, https, ftp, etc.)
        s/\bhttps?:\/\/[^\s)]+//g;

        # Remove reference definitions [ref]: url
        s/^\[[^]]+\]:\s*.*$//g;

        # Remove any remaining parentheses that might be left dangling after link removal
        s/\([ \t]*\)//g;

        # Clean up multiple spaces
        s/[[:space:]]{2,}/ /g;

        # Remove empty lines
        /^[[:space:]]*$/d;

        # Ensure single newline at end of file
        $a\
    ' "$input_file"
}

# Function to process the file and handle output
process_file() {
    local input_file="$1"
    local output_file="$2"
    
    if [ -n "$output_file" ]; then
        # Validate output location before processing
        validate_output_location "$output_file"
        
        # Process and save to output file
        if remove_hyperlinks "$input_file" > "$output_file"; then
            echo "Success: Hyperlinks have been removed and saved to '$output_file'."
        else
            echo "Error: Failed to process file." >&2
            exit $EXIT_PERMISSION_ERROR
        fi
    else
        # Display result in terminal
        remove_hyperlinks "$input_file"
    fi
}

# Main function
main() {
    # Check number of arguments
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        display_usage
        exit $EXIT_INVALID_ARGS
    fi
    
    local input_file="$1"
    local output_file="$2"
    
    # Validate input file
    validate_input_file "$input_file"
    
    # Process the file
    process_file "$input_file" "$output_file"
    
    exit $EXIT_SUCCESS
}

# Execute main function with all script arguments
main "$@"
